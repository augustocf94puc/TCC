# Software Refactoring for System Modernization

(B. M. Santos, I. G. -R. de Guzmán, V. V. de Camargo, M. Piattini and C. Ebert, "Software Refactoring for System Modernization," in _IEEE Software_, vol. 35, no. 6, pp. 62-67, November/December 2018, doi: 10.1109/MS.2018.4321236.)

## 1. Fichamento de Conteúdo


O artigo mostra que através da refatoração conseguimos modernizar um software legado, melhorando a interoperabilidade entre os sistemas. Mas para que a refatoração funcione ela deve ser feita de modo continua e com muita cautela, pois a refatoração pode acabar arruinando arquiteturas inteiras.

A escolha das ferramentas que vão auxiliar refatoração é fundamental para facilitar esse processo de mudanças e modernização de forma eficiente. Essa refatoração deve considerar toda a arquitetura do sistema, desde o nível mais baixo (Código fonte), até os níveis mais altos de abstração (Modelo de negócio).  

Com isso fica claro que a refatoração é uma tecnologia chave para manter um código legado funcionando, e atendendo a novos requisitos.

## 2. Fichamento Bibliográfico 

* _Architecture-Driven Modernization (ADM)_ é um processo de compreensão e envolução de ativos de software existentes para fins de melhoria de software, modificações, interoperabilidade, refatoração, reestruturação, reutilização, portabilidade, migração, entre outros.

* _Reverse-engineering_ é um conceito de destrinchar o funcionamento tecnológico de um determinado sistema, objeto ou dispositivo por meio da análise de sua função, estrutura e operação.

* _Metamodelo_ são as representações abstratas do sistema.

## 3. Fichamento de Citações 

*   _"Use refactoring as a process within maintenance in which you embed a suitable tool—not vice versa."_
    
*   _"Ensure a high level of design experience and good software engineering judgment during refactoring, as it can't turn garbage into perfect code."_
    
*   _"Be aware that refactoring will dilute previous design and architecture patterns, thus making the code less maintainable from the initial designers' perspective."_
    
*   _"Before performing a full refactoring, perform static code analysis to highlight areas of high complexity that should be restructured or replaced. This will help manage complexity."_
    
*   _"Consider changing from code-driven to model-driven refactoring, to generate and maintain the underlying design models."_

* _"Continuous improvement is better than delayed perfectionism."_
